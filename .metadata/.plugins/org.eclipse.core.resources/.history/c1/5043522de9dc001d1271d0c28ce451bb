1. 자바스크립트 사용방법
	<script>
	</script>
	-body태그에 정의
	-head태그에 정의
		자바스크립트 명령문 , 함수
	-외부문서에 정의하고 사용
	-inline으로 태그 내부에서 정의
		-이벤트 핸들러
		
	
2. 문법

3. 함수
	1) 함수를 선언하고 호출하는 방법
	2) 변수의 종류
		-웹브라우저에서 자바스크립트를 해석할때 함수선언부를 가장 먼저 해석한다.
		-var로 선언된 변수를 가장 위로 끌어올려(global변수) 해석한다.
		-이전은 var키워드만 이용해서 변수를 선언하고 정의
		-ECMAScript 6버전부터는 let과 const가 추가됨
		-let으로 선언된 변수는 선언된 {} 안에서만 사용할 수 있다.
		-let으로 선언한 변수는 재할당이 가능하다.
		-const로 선언된 변수는 상수이므로 재할당이 불가능하다.
		-var로 변수를 선언하면 중복된 선언이 가능하다.
		-let은 중복선언 X
		
			전역변수(글로벌변수)
				:자바 스크립트 문서 내의 자바스크립트를 사용할수있는 곳에서 공유
			지역변수
				:선언된 위치에서만 사용할 수 있는 변수
				함수{}안에서 var키워드로 선언된 변수는 함수 내부에서만 사용할 수 있는 지역변수

	3) 함수와 변수의 호이스팅
		- 웹 브라우저에서 자바스크립트를 해석할떄 함수선언부를 가장 먼저 해석한다.
		- global 영역에 선언된 변수나 함수를 자바스크립트 인터프리터가 
		- 최우선의 영역으로 끌어 올려서 global속성으로 추가한다.
		- 이를 호이스팅이라 한다.
		
		- var로 선언된 변수를 가장 위로 끌어올려(global변수) 해석한다.
		- 끌어올리긴 하지만 값이 할당되진않는다.
		
		
	4) 표현식으로 함수 정의하기
		[형식]
		1. 이름이 있는 함수의 표현식
		var 변수명 = function 함수명(매개변수list){
			//실행 할 코드
		}
		=> 연산자를 이용해서 변수에 함수를 할당하는 표현
		
		2. 익명 함수의 사용 (이름없는 함수의 표현식)
		var 변수명 = function(매개변수list){
			//실행할 코드
		}
		=> 익명함수는 표현식으로 주로 사용하거나 매개변수에서 함수를 정의하고
		바로 사용
		
	5) 즉시 실행함수
		-한 번만 실행함수는 실행될 곳에서 바로 선언해서 실행되도록 할 수 있다.
		-즉시 실행함수는 함수를 문장의 형태로 정의하고 선언하므로 ;을 추가해야한다.
		[문법]
		(function(){
			내용
		}());

4. 이벤트
	-웹브라우저에 마우스나 키보드의 여러 움직임을 발생시키는 것을 이벤트라 한다.
	즉, 사용자가 웹페이지에서 마우스와 키보드를 가지고 하는 모든 행위
	
	-이벤트 종류
	click
	dbclick
	mouseover : 웹페이지의 구성요소에 마우스가 올라갈떄 발생
	mouseout : 마우스가 구성요소 밖으로 이동할때
	keydown : 키보드를 누르는 동안
	keypress : 키보드를 눌렀을때
	keyup: 키보드를 뗐을때

5. 내장객체
	-브라우저마다 자바스크립트를 해석하고 실행할 수 있는 엔진이 탑재(프로그램이 포함)되어 있다.
	
	1)String객체
	=>문자열을 조작하기 위해 필요한 메소드들을 제공
	
	2)Math객체
	=>수학 삼각과 관련된 기능을 제공하는 객체
	
	3)Date객체
	=>
	
	4)Array객체

6. 브라우저객체

	BOM(Browser Object Model)

	- 웹 브라우저와 관련된 객체의 집합
	
	- 객체 모델 종류: window(최상위), location, navigator, history, screen, document
	
	- DOM(Document Object Model) 으로 통합해서 칭하기도 함
	
	- 정확히는 자바스크립트가 아닌 웹브라우저가 제공하는 기능

	
	[window객체]
	브라우저에서 상위 객체
	1) 대화상자와 관련된 메소드
		-alert
		-confirm
		-prompt
		
	2) popup
		- open() : 새 창을 실행
		window.open(경로, 이름, 옵션)
		경로: 오픈될 팝업창의 path
		이름: 팝업창의 이름
		옵션: 오픈될 창의 크기, 위치 , 구성요소 ...
		
		-close() : 창을 닫기
		-opener 객체 : 팝업창을 open해준 객체.
		
	3) 데이터처리
		parseInt : 숫자모양을 한 문자열을 숫자로 변환
		isNaN : isNotaNumber 입력한 문자열이 숫자인지 문자인지 판단
			데이터타입은 확인하지않고, 문자의 모양만 갖고 확인함
			수식을 입력시 수식결과값으로 넘어감 ㄷㄷㄷ;?? 애매함.
				(문자-true , 숫자-false)
		eval : 매개변수로 전달된 메시지를 실제로 실행 (보안에 취약)
		trim : 공백을 제거
		

7. DOM객체(Document Object Model)
	문서기반
	-html문서를 구성하는 태그들을 모두 객체로 정의하고 관리
	-w3.org(국제표준기구 - 웹표준화)
	-HTML문서의 모든 구성요소를 객체로 정의하고 계층구조의 형태로 관리하는 객체모델
	-wc3에서 정한 표준화된 객체 모델
	-웹 페이지의 문서를 제어하기 위해서 지켜야 하는 규칙
	-플랫폼이나 언어에 상관없이 컨텐츠 구조를 동적으로 제어하고 액세스할 수 있도록
	 표준으로 정해놓은 방법
	 
	1) DOM의 구성 요소
		-element : html 문서를 구성하는 컨텐츠(태그)
		-text : 태그와 태그 사이에 입력한 문자열
		-attribute : 속성 , 태그 내부에 정의되어 있는 속성
		-document : dom객체의 상위객체
		-Node : 엘리먼트 1개
		-NodeList : 엘리먼트 여러 개
		
	2) DOM객체를 액세스 하는 방법
		-id		
		-class	
		-tag	
	
	3) DOM API의 메소드
		1.querySelector
			=> selector를 기준으로 dom객체를 구하기
		2.querySelectorAll
			=> selector를 기준으로 dom객체를 구하기 (객체는 복수개)
			=> 동일한 selector로 정의된 객체 여러 개를 구할때 사용
			var(let , const) 객체명 = document.querySelectorAll("선택자");
			객체명.forEach()를 이용해서 구한 모든 객체에 동일한 작업을 수행할 수 있다.
			객체명.forEach(function(객체,index){ => 함수의 매개변수는 자바스크립트 해석기에서 자동으로 전달
				//모든 객체에 동일하게 작업하고 싶은 내용을 정의
		})
		3.getElementById
			=> id 속성값을 기준으로 엘리먼트를 구하기
			
		4.getElementsByTagName
			=>()안에 정의한 태그와 동일한 태그로 정의되어 있는 모든 엘리먼트를 구하기
			
		5.getAttribute
			=> 속성에 정의된 속성값을 리턴
			
		6.appendChild
			=>자식객체로 파라미터를 추가 
			
		7.createElement
			=>새 요소 생성
			
		8.createTextNode
			=> 텍스트 노드 생성
		
		9.insertBefore
			=>
			
		10.setAttribute
			=>
		

	4) DOM API의 속성
		1.textContent	:태그와 태그 사이의 문자열반환
		2.childNodes	:모든 자식노드를 NodeList의 형태로 반환
						 (공백도 자식 노드에 포함, children은 공백 제외)
		3.firstChild	:첫번째 자식 노드
		4.lastChild		:마지막 자식 노드
		5.nodeName		:노드의 이름(엘리먼트명과 동일 - 텍스트 노드나 공백노드는 #text로 출력)
		
	
	
8. 사용자정의객체

9. JSON

10. JQuery

11. 자바스크립트 프레임워크 및 라이브러리