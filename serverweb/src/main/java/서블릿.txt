실행방법에 따라 자바 클래스의 구분
	-Application : main메소드를 만들어서 실행
	-Applet : html 태그로 삽입(지금은 안씀)
	-Servlet : 
	
<<서블릿>>
	-클라이언트의 요청을 처리하기 위한 자바 기술
	
	-서버에서 클라이언트의 요청을 처리하고 응답할 수 있도록 만들어진 자바 객체
	
	-클라이언트가 요청을 하면 서버에서 실행되면서 DB에 대한 처리, 서버의 리소스를 이용해서 만들어진 결과를
	 클라이언트에 응답한다.
	
	-클라이언트가 요청하면 서버가 자동으로 요청한 서블릿을 찾아서
	 실행하기 때문에 무조건 서버가 인식하는 위치에 있어야한다.
	 
	-서블릿 디렉토리 (표준화 된 폴더 구조의 classes폴더)
	=> 서버가 서블릿을 찾는 위치
	
	-서버를 구성하는 많은 클래스 내부에서 우리가 만든 서블릿 객체가
	 실행되도록 하기 위해서는 서버가 인식할 수 있도록
	 서버가 찾을 수 있는 규칙에 맞게 서블릿 클래스를 만들어야 한다.
	 
1. 서블릿 작성 규칙
	-서버가 인식할 수 있도록 규칙에 맞게 서블릿을 작성해야 한다.
	1) 표준화된 폴더 구조안에 서블릿 클래스가 위치해야 한다.
	서블릿이 저장될 폴더 (서블릿 디렉토리) - classes
	[표준화된 폴더 구조]
		Context
			|
			|
			|__ WEB-INF (폴더)
					|--- web.xml
					|--- lib(폴더) - 자바라이브러리 파일
					|___ classes(폴더) - 서블릿 , dao , vo ... 자바클래스
					
	2)서버에 의해서 호출이 될 것이므로 무조건 반드시 public클래스로 작성해야 한다.
	3) 서버가 서블릿으로 인식하고 실행해야 하므로 무조건 상속받아야 하는 클래스가 존재한다.
		=> 서블릿 클래스가 되기 위해서 무조건 서블릿 클래스를 상속받아야 한다.
		   Servlet		인터페이스
		     ^
		     |
		GenericServlet	추상클래스(서블릿의 일반적인 내용이 정의된 서블릿클래스)
			 ^
			 |
		HttpServlet		HTTP프로토콜에 특징적인 내용이 정의된 서블릿 클래스
			 ^
			 |
		MySerblet		사용자가 만든 서블릿 
	
	4) 서버가 호출할 메소드를 오버라이딩
		-서버가 자동으로 호출할 메소드를 오버라이딩해서 내가 실행하고 싶은 명령문을 구현한다
		-서버가 자동으로 호출하는 메소드를 callback메소드라 한다.
		-클라이언트가 요청하면 서버가 요청을 분석해서 서블릿 디렉토리에 위치하는 서블릿 클래스를 찾아
		오버라이딩된 메소드를 자동으로 호출한다.
		따라서 상황에 맞게 적절하게 처리하고 싶은 내용이 있다면 메소드를 
		오버라이딩해서 내용을 정의해야 한다.
		-자동으로 메소드가 호출된다는 말은 lifecycle읠 서버가 관리
		
		-오버라이딩 해야하는 메소드는 lifecycle과 관련있는 메소드
		
		[오버라이딩해야 하는 메소드]
			-init : 서블릿 객체가 초기화 될떄 호출
			-service : 클라이언트가 요청될때 호출되는 메소드
						=>클라이언트의 요청을 처리하는 메소드로 요청을 받고 처리할 내용을 구현
						ex)로그인, 게시판목록보기 , 메일읽기 , 장바구니조회 , 상품목록조회 , 잔액조회, 예약하기...
						
	
	5) 서블릿 등록
		- 서버가 인식할 수 있도록 등록
		- 서버가 요청을 분석해서 서블릿 디렉토리에서 서블릿을 찾아서 실행할 수 있도록 어떤 요청에 어떤 서블릿이 실행되어야 하는지 등록
		- 설정파일에 등록(web.xml)
		- 실제 작업은 annotation으로 설정
		- web.xml파일은 xml형식의 파일이므로 태그로 작성하고 작성규칙이 정해져 있기 때문에 정확하게 작성해야 한다.
													______ 
													dtd - xml안에 정의하고 사용할 엘리먼트를 정의한 명세서
													(엘리먼트의 순서 , 타입 , 값 , 하위구조....)
		
		1) 서블릿 등록
		-실제 어떤 패키지의 어떤 클래스를 실행하는지 등록: 무엇을???
			<servlet>
				<servlet-name>서블릿명</servlet-name>
				<servlet-class>서블릿의 실제 클래스명과 위치(패키지명)</servlet-class>
			</servlet>
			
			<servlet>
				<servlet-name>first</servlet-name>
				<servlet-class>basic.FirstServlet(패키지명)</servlet-class>
			</servlet>
		
		2) 서블릿 매핑
		-등록된 서블릿을 어떻게 요청하면 실행할 것인지 등록(어떤 url로 요청할 것인지)
		-반드시 <servlet>엘리먼트 다음에 위치해야 한다. 즉,<servlet>엘리먼트와 함께 한 쌍으로 정의해야 한다.
		-위에서 등록한 서블릿을 어떻게 요청할 것인지를 등록하는 엘리먼트
		<servlet-mapping>
			<servlet-name>위에서 정의한 서블릿의 이름</servlet-name>
			<url-pattern>요청할 서블릿의 path</url-pattern>
						------------------
								|__ 반드시 /나 .으로 시작해야 한다.
		</servlet-mapping>
		
		ex) first라는 이름으로 등록된 서블릿을 /first.sds로 요청하면 실행하도록 정의
		<servlet-mapping>
			<servlet-name>first</servlet-name>
			<url-pattern>/first.sds</url-pattern>
		</servlet-mapping>
		
		
2. 서블릿요청방법
	-서블릿을 어떻게 실행해야 하는지 알 수 있어야 한다.
	
	
	
	
2. 서블릿 요청 방법
	-서블릿을 어떻게 실행해야 하는지 알 수 있어야 한다.
	